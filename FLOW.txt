MiniTB 核心数据流可视化
================================================================================

设备数据上报完整流程：

┌───────────────────────────────────────────────────────────────────────┐
│ 第1层: IoT设备                                                         │
└───────────────────────────────┬───────────────────────────────────────┘
                                │
                     MQTT PUBLISH消息
                     Topic: v1/devices/me/telemetry
                     Payload: {"temperature":25}
                     Token: test-token-001
                                │
                                ↓
┌───────────────────────────────────────────────────────────────────────┐
│ 第2层: MQTT传输层 (MqttTransportHandler)                               │
│                                                                        │
│  channelRead0() → handlePublish()                                     │
│     • 解析 topic: v1/devices/me/telemetry                             │
│     • 提取 payload: {"temperature":25}                                │
│     • 提取 token: test-token-001                                      │
└───────────────────────────────┬───────────────────────────────────────┘
                                │
          transportService.processTelemetry(token, json)
                                │
                                ↓
┌───────────────────────────────────────────────────────────────────────┐
│ 第3层: 传输服务 (TransportService)                                     │
│                                                                        │
│  Step 1: authenticateDevice(token)                                    │
│          → Device{name="温度传感器-01", id=xxx}                        │
│                                                                        │
│  Step 2: checkRateLimit(device)                                       │
│          → true (通过检查)                                             │
│                                                                        │
│  Step 3: 创建TbMsg 🔥核心转换点🔥                                      │
│          TbMsg.builder()                                              │
│              .type(POST_TELEMETRY_REQUEST)                            │
│              .originator(device.getId())                              │
│              .metaData({deviceName, deviceType, ts})                  │
│              .data("{\"temperature\":25}")                            │
│              .build()                                                 │
│                                                                        │
│  Step 4: sendToRuleEngine(tbMsg)                                      │
└───────────────────────────────┬───────────────────────────────────────┘
                                │
                      ruleEngineService.processMessage(tbMsg)
                                │
                                ↓
┌───────────────────────────────────────────────────────────────────────┐
│ 第4层: 规则引擎服务 (RuleEngineService)                                │
│                                                                        │
│  异步处理:                                                             │
│    executorService.submit(() -> {                                     │
│        RuleChain chain = selectRuleChain(msg);                        │
│        chain.process(msg);                                            │
│    })                                                                 │
└───────────────────────────────┬───────────────────────────────────────┘
                                │
                        rootRuleChain.process(msg)
                                │
                                ↓
┌───────────────────────────────────────────────────────────────────────┐
│ 第5层: 规则链执行 (RuleChain)                                          │
│                                                                        │
│  节点1: LogNode[入口日志]                                              │
│    onMsg(msg) → 打印日志 → 返回msg                                     │
│         ↓                                                             │
│  节点2: FilterNode[temperature > 20.0]                                │
│    onMsg(msg) → 检查条件(25>20) → 返回msg                             │
│         ↓                                                             │
│  节点3: LogNode[过滤后日志]                                            │
│    onMsg(msg) → 打印日志 → 返回msg                                     │
│         ↓                                                             │
│  节点4: SaveTelemetryNode                                             │
│    onMsg(msg) → storage.save() → 返回msg                              │
│         ↓                                                             │
│  节点5: LogNode[保存完成]                                              │
│    onMsg(msg) → 打印日志 → 返回msg                                     │
│         ↓                                                             │
│       完成                                                             │
└───────────────────────────────┬───────────────────────────────────────┘
                                │
                    storage.save(deviceId, ts, data)
                                │
                                ↓
┌───────────────────────────────────────────────────────────────────────┐
│ 第6层: 数据存储 (TelemetryStorage)                                     │
│                                                                        │
│  内存存储:                                                             │
│    Map<DeviceId, List<TelemetryData>>                                │
│    deviceId → [data1, data2, data3, ...]                             │
│                                                                        │
│  文件备份:                                                             │
│    minitb/data/telemetry_xxx.log                                      │
│    [2024-10-23 21:05:30] {"temperature":25,"humidity":60}            │
└───────────────────────────────────────────────────────────────────────┘


关键类及其作用：
================================================================================

1. TbMsg                核心消息对象，贯穿整个数据流
2. TransportService     传输层到业务层的桥梁，创建TbMsg
3. RuleEngineService    规则引擎核心，异步处理和路由
4. RuleChain            规则节点的组合器，实现责任链模式
5. TelemetryStorage     数据持久化，数据流的终点


与ThingsBoard的关键区别：
================================================================================

组件                  MiniTB              ThingsBoard
--------------------------------------------------------------------------------
消息传递             直接调用             Kafka消息队列
并发处理             线程池               Actor模型 (TenantActor → RuleChainActor)
规则链路由           if-else              基于关系类型路由 (Success/Failure)
数据存储             内存+文件            Cassandra/PostgreSQL + Redis缓存
集群支持             单机                 分布式集群，水平扩展


代码执行示例（温度=25）：
================================================================================

MqttTransportHandler.handlePublish()
  ↓ 提取: token="test-token-001", json={"temperature":25}
  
TransportService.processTelemetry(token, json)
  ↓ 认证: Device{name="温度传感器-01"}
  ↓ 创建: TbMsg{type=POST_TELEMETRY_REQUEST, data=...}
  
RuleEngineService.processMessage(tbMsg)
  ↓ 异步提交处理
  ↓ 选择: Root Rule Chain
  
RuleChain.process(tbMsg)
  ↓ LogNode: 打印 "入口日志"
  ↓ FilterNode: 25 > 20 ✓ 通过
  ↓ SaveTelemetryNode: 保存数据
  ↓ LogNode: 打印 "保存完成"
  
TelemetryStorage.save()
  ↓ 内存: Map保存
  ↓ 文件: 写入telemetry_xxx.log
  ✓ 完成


性能对比：
================================================================================

MiniTB:
  • 吞吐量: ~1,000 msg/s (单机)
  • 延迟: <10ms (内存)
  • 并发: 4线程

ThingsBoard:
  • 吞吐量: 100,000+ msg/s (集群)
  • 延迟: ~50ms (含Kafka+Cassandra)
  • 并发: 数千Actor并发处理

